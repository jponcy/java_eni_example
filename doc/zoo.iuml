@startuml Zoo_v0
class Enclos {
    -bassin: boolean
    -terrain: boolean
    +ajouterAnimal(animal: Animal): void
    +peutRentrer(animal: Animal): boolean
}

class Animal {
    -nom: String
    -phraseDeplacement: String
    -phraseRepos: String
    -avoirBesoinBassin: boolean
    -avoirBesoinTerrain: boolean
    +seDeplacer(): void
    +seReposer(): void
}

Enclos --> "0..5" Animal: animaux >

class Application {
    {static} main(argv: String[*]): void
}

Application .> Enclos
Application .> Animal
@enduml

@startuml Zoo_v1
interface Animal {
    +seDeplacer(): void
    +seReposer(): void
}

!unquoted procedure animal($name)
class $name implements Animal {
    +seDeplacer(): void
    +seReposer(): void
}
!endprocedure

animal(Sanglier)
animal(Dauphin)
animal(ChatPecheur)


' interface Enclos {
'     +{static} NB_ANIMAUX_PAR_ENCLOS = 5;

'     +ajoutAnimal(animal: Animal): void
'     +peutRentrer(animal: Animal): boolean
' }

' !unquoted procedure enclos($name)
' class $name implements Enclos {
'     -compteurAnimaux: int = 0
'     +ajoutAnimal(animal: Animal): void
'     +peutRentrer(animal: Animal): boolean
'     -lanimalEstCompatible(animal: Animal): boolean
'     -pasDautreEspece(animal: Animal): boolean
'     -ilResteDesPlaces(): boolean
' }
' !endprocedure
abstract class Enclos {
    +{static} NB_ANIMAUX_PAR_ENCLOS = 5;
    -compteurAnimaux: int = 0

    +ajoutAnimal(animal: Animal): void
    +peutRentrer(animal: Animal): boolean
    -pasDautreEspece(animal: Animal): boolean
    -ilResteDesPlaces(): boolean
    {abstract} #lanimalEstCompatible(animal: Animal): boolean
}

!unquoted procedure enclos($name)
class $name implements Enclos {

    -lanimalEstCompatible(animal: Animal): boolean
}
!endprocedure

enclos(Terrain)
enclos(Bassin)
enclos(TerrainBassin)

Enclos -> "0..5" Animal: animaux >

@enduml

@startuml Zoo_v2
abstract class Animal {
    +seDeplacer(): void
    +seReposer(): void
}

!unquoted procedure animal($name, $impls)
class $name extends Animal implements $impls {
    +seDeplacer(): void
    +seReposer(): void
}
!endprocedure

interface Aquatique
interface Terrestre
interface Amphibie
'  extends Aquatique, Terrestre
Amphibie --|> Aquatique
Amphibie --|> Terrestre

animal(ChatPecheur, Terrestre)
animal(Alligator, Amphibie)
animal(Phoque, Amphibie)
animal(Dauphin, Aquatique)


abstract class Enclos {
    -{static} NB_ANIMAUX_PAR_ENCLOS = 5;
    -compteurAnimaux: int = 0

    +ajoutAnimal(animal: Animal): void
    +peutRentrer(animal: Animal): boolean
    {abstract}#estCompatible(animal: Animal): boolean
}

!unquoted procedure enclos($name)
class $name implements Enclos {
    #estCompatible(animal: Animal): boolean
}
!endprocedure

enclos(Terrain)
enclos(Bassin)
enclos(TerrainBassin)

Enclos -> "0..5" Animal: animaux >

' Bassin ..> Aquatique
' Terrain ..> Terrestre
' TerrainBassin ..> Amphibie
@enduml
